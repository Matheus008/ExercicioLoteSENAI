package lote.steps;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.util.ArrayList;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.BeforeAll;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import lote.acoes.Despacho;
import lote.acoes.NotaFiscal;
import loteECamisetas.objeto.Lote;

public class stepsLote {
	
	private Lote lote;
	private NotaFiscal notaFiscal;
	private int quantidadeTotal = 0;
	private Despacho despacho;
	private ArrayList<Despacho> listaDeProdutosProntoParaDespacho = new ArrayList<>();

	@BeforeAll
	public void start() {
		notaFiscal = new NotaFiscal();
		lote = new Lote();
		despacho = new Despacho();
	}
	
	@Nested
	@DisplayName()
	
	
	@Test
	public void testAddCamisetas() {
		
		int expected = 3;
		
		lote.adicionarCamisas(3, "M", "Branco"); 
		lote.adicionarCamisas(6, "P", "Branco"); 
		lote.adicionarCamisas(20, "G", "Branco");
		
		assertEquals("Itens cadastrados com sucesso", lote.getListaDeCamisetas().size(), expected);
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/*@Before
	public void setUp() {
		notaFiscal = new NotaFiscal();
		lote = new Lote();
		despacho = new Despacho();
	}
	
	@Given("A quantidade total de itens que é {int} gera um número identificador e a data de fabricação")
	public void aQuantidadeTotalDeItensQueÉGeraUmNúmeroIdentificadorEADataDeFabricação(Integer quantidade) {
		lote = new Lote(quantidade);
	}
	

	@Given("Cadastra {int} camisetas da cor {string} e tamanho {string}")
	public void cadastraCamisetasDaCorETamanho(Integer quantidade, String cor, String tamanho) {
		lote.adicionarCamisas(quantidade, tamanho, cor);

		this.quantidadeTotal += quantidade;
	}
	
	@Given("Muda o status da produção como finalizada")
	public void mudaOStatusDaProduçãoComoFinalizada() {
		assertEquals(lote.getQuantidadeTotalDePecas(), this.quantidadeTotal);

		lote.producaoFinalizada();
		this.quantidadeTotal = 0;
	}
	
	@When("Finalizada a produção uma nota fiscal é emitida para cada lote")
	public void finalizadaAProduçãoUmaNotaFiscalÉEmitidaParaCadaLote() {
		assertTrue(lote.isProducaoFinalizada());
		notaFiscal.emitirNotaFiscal(lote);
	}
	
	@When("Detalhando as informações do lote e lista as camisetas do lote")
	public void detalhandoAsInformaçõesDoLoteEListaAsCamisetasDoLote() {
	    System.out.println(notaFiscal.conteudoDaNotaFiscal());
	}
	
	@Then("Gera um código de validação para o despacho")
	public void geraUmCódigoDeValidaçãoParaODespacho() {
	    assertTrue(notaFiscal.isNotaFiscalEmitida());
	    despacho = new Despacho(notaFiscal);
	}
	
	@Then("o lote é marcado como pronto para envio")
	public void oLoteÉMarcadoComoProntoParaEnvio() {
	    despacho.prontoParaEnvio();
	}

	@After
	public void adicionarNaListaDeDespacho() {
		listaDeProdutosProntoParaDespacho.add(despacho);
	}*/
	
}
